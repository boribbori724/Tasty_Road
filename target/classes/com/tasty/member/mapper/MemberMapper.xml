<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace="pakage + interface" -->
<mapper namespace="com.tasty.member.mapper.MemberMapper">

	<!-- 로그인 -->
	<select id="login" resultType="com.tasty.member.vo.LoginVO">
		select id, name, gradeNo
		from member
		where id = #{id} and pw = #{pw}
	</select>
	
	<!-- 회원가입 -->
	<insert id="join">
		insert into member(id, pw, name, gender, birth, tel, email, address, memberNo, gradeNo)
		values(#{id}, #{pw}, #{name}, #{gender}, #{birth}, #{tel}, #{email}, #{address}, member_seq.nextval, '4')
	</insert>
	
	
	<!-- 아이디 중복 검사 -->
	<select id="check_id" parameterType="String" resultType="int">
		select count(*) from member where id = #{id}
	</select>
	
	<!-- 이메일 중복 검사 -->
	<select id="check_email" parameterType="String" resultType="int">
		select count(*) from member where email = #{email}
	</select>

	<!-- 전화번호 중복 검사 -->
	<select id="check_tel" parameterType="String" resultType="int">
		select count(*) from member where tel = #{tel}
	</select>
	
	
	<!-- 아이디,비밀번호 찾기 용 -->
	<!-- 아이디 중복 검사 -->
	<select id="checkId" resultType="com.tasty.member.vo.MemberVO">
		select id from member where id = #{id}
	</select>
	
	<!-- 이메일 중복 검사 -->
	<select id="checkEmail" resultType="com.tasty.member.vo.MemberVO">
		select email from member where email = #{email} and id = #{id}
	</select>

	<!-- 탈퇴 검사 -->
	<select id="checkPw" resultType="com.tasty.member.vo.MemberVO">
		select email from member where id = #{id} and pw = #{pw}
	</select>
	
	<!-- 아이디 찾기 -->
	<select id="findId" resultType="com.tasty.member.vo.MemberVO">
		select id from member where email = #{email} and name = #{name}
	</select>
	
	<!-- 비밀번호 변경 -->
	<update id="updatePw" >
		update member set pw = #{pw} where id = #{id}
	</update>
	
	<!-- 내 정보 보기 -->
	<select id="myPage" resultType="com.tasty.member.vo.MemberVO">
		select m.id, m.name, m.birth, m.gender, m.tel, m.email, m.regDate, m.status, m.address, m.gradeNo, g.gradeName
		from member m, grade g
		where (id = #{id}) and (m.gradeNo = g.gradeNo)
	</select>

	<!-- 가게 정보 보기 -->
	<select id="myShopPage" resultType="com.tasty.member.vo.shopMemberVO">
		select s.shopName, s.shopNo, s.address, s.image, s.content, s.tel, m.id, s.content, s.image 
		from member m, shopMember s
		where (m.id = #{id}) and (m.id= s.id)
	</select>


	<update id="memberUpdate">
		update member set pw = #{pw}, tel = #{tel}, address = #{address}
		where id=#{id}
	</update>

	<update id="shopUpdate">
		update shopMember set content = #{content}
		where id=#{id}
	</update>
	
	<update id="updateFile">
		update shopMember set  image = #{image}
		where id = #{id}
	</update>
	
	<delete id="memberWithdraw">
		delete from member
		where id=#{id} and pw=#{pw}
	</delete>
	
	
	
	
	<!-- 관리자 -->
	
	<select id="memberList" resultType="com.tasty.member.vo.MemberVO">
		select rnum, memberNo, id, name, tel, email, gradeNo, gradeName from(
		 select rownum rnum, memberNo, id, name, tel, email, gradeNo, gradeName from(
		  select  m.memberNo, m.id, m.name, m.tel, m.email, m.gradeNo, g.gradeName 
		  from member m, grade g 
		  where m.gradeNo = g.gradeNo
		  order by memberNo desc
		  )
		  ) where rnum between #{startRow} and #{endRow}
	</select>
	
	<select id="getTotalRow" resultType="java.lang.Long">
		select count(*) from member
		
	</select>
	
	<update id="gradeModify">
		update member set gradeNo = #{gradeNo} where id = #{id}
	</update>
	
	<select id="view" resultType="com.tasty.member.vo.MemberVO">
		select m.id, m.name, m.birth, m.gender, m.tel, m.email, m.regDate, m.status, m.address, m.gradeNo, g.gradeName
		from member m, grade g
		where (id = #{id}) and (m.gradeNo = g.gradeNo)
	</select>

	<select id="shopView" resultType="com.tasty.member.vo.shopMemberVO">
		select id, shopName, shopNo, address, tel, content, image
		from shopMember
		where (id = #{id})
	</select>
	
	<insert id="shopReg">
		insert into shopMember(id, shopName, shopNo, address, tel, content, image)
		values(#{id}, #{shopName}, #{shopNo}, #{address}, #{tel}, #{content}, #{image})
<!-- 		insert into shopMember(id, shopname, shopNo, address, tel) -->
<!--         values('test4', '가게명', '123-45-67891', '경기도 양주시', '031-123-4567'); -->
	</insert>
	
	<update id="masterShopUpdate">
		update shopMember set shopName = #{shopName}, tel =#{tel}, address = #{address}
		where id=#{id}
	</update>
	
	<delete id="shopDelete">
		delete from shopMember
		where id=#{id}
	</delete>
	
	

</mapper>